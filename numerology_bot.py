try:
    from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
except ModuleNotFoundError:
    print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'python-telegram-bot' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install python-telegram-bot")
    exit()

import os
import re
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫ –∏–∑ TXT-—Ñ–∞–π–ª–∞

def load_descriptions(file_path=None):
    if file_path is None:
        file_path = os.path.join(os.path.dirname(__file__), "numerology_data.txt")
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            content = file.read()
    except FileNotFoundError:
        logging.error(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}

    descriptions = {}
    current_num = None
    current_text = []

    for line in content.splitlines():
        line = line.strip()
        if not line:
            continue
        if re.match(r"^\d{1,2}:$", line):
            if current_num is not None:
                descriptions[current_num] = "\n".join(current_text).strip()
            current_num = int(line[:-1])
            current_text = []
        else:
            current_text.append(line)

    if current_num is not None and current_text:
        descriptions[current_num] = "\n".join(current_text).strip()

    return descriptions

descriptions = load_descriptions()

ASK_DAY = range(1)[0]

ADMIN_ID = 5786594975

main_menu = ReplyKeyboardMarkup([
    ["üî¢ –£–∑–Ω–∞–π –æ —Å–µ–±–µ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"],
    ["üë∂ –î–µ—Ç—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞"],
    ["‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üßò‚Äç‚ôÄÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ"],
    ["üß† –õ–∏—á–Ω–æ—Å—Ç—å", "üåü –ú–∏—Å—Å–∏—è –¥—É—à–∏"],
    ["üíº –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ–Ω—å–≥–∏", "üå≥ –°–≤—è–∑—å —Å —Ä–æ–¥–æ–º"],
    ["üóì –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"],
    ["üôã‚Äç‚ôÄÔ∏è –û —Å–µ–±–µ"]
], resize_keyboard=True)

date_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton(str(i)) for i in range(j, j + 5) if i <= 31] for j in range(1, 32, 5)],
    resize_keyboard=True
)

SECTION_MAP = {
    "üë∂ –î–µ—Ç—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞": "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —è –ø—Ä–æ–≤–µ–¥—É –æ—Å–æ–±—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –∏ –¥–∞–º —Ç–µ–±–µ –∑–Ω–∞–Ω–∏—è –æ —Ç–≤–æ–µ–º —Ä–µ–±–µ–Ω–∫–µ: —Ç–∞–ª–∞–Ω—Ç—ã, —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–∞–¥–∞—á–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–Ω –ø—Ä–∏—à—ë–ª –≤ —ç—Ç–æ—Ç –º–∏—Ä.",
    "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è": "–£–∑–Ω–∞–π, –∫–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.",
    "üßò‚Äç‚ôÄÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö –∏ –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
    "üß† –õ–∏—á–Ω–æ—Å—Ç—å": "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —è –¥–∞–º —Ç–µ–±–µ –∑–Ω–∞–Ω–∏—è –∫—Ç–æ —Ç—ã, –∫–∞–∫–æ–π —É —Ç–µ–±—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∫–∞–∫–∏–µ —Ç–∞–ª–∞–Ω—Ç—ã, —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Å –∫–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π —Ç—ã –ø—Ä–∏—à—ë–ª –≤ —ç—Ç–æ—Ç –º–∏—Ä –∏ –∫–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–≤–µ—Ä—à–∏—Ç—å.",
    "üåü –ú–∏—Å—Å–∏—è –¥—É—à–∏": "–û –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ –¥—É—à–∏ –≤ —ç—Ç–æ–º –≤–æ–ø–ª–æ—â–µ–Ω–∏–∏.",
    "üíº –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ–Ω—å–≥–∏": "–ß—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ–∫ –∏ –ø–æ—Ç–æ–∫ –∏–∑–æ–±–∏–ª–∏—è.",
    "üå≥ –°–≤—è–∑—å —Å —Ä–æ–¥–æ–º": "–ß—Ç–æ –¥–∞—ë—Ç —Å–≤—è–∑—å —Å —Ä–æ–¥–æ–º, —Ä–æ–¥–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞—á–µ–º –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É."
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ –ö–æ–¥ –¥—É—à–∏. –¶–∏—Ñ—Ä–æ–≤–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è.\n\n"
        "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è ‚Äî —ç—Ç–æ –Ω–∞—É–∫–∞, –∏–∑—É—á–∞—é—â–∞—è –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å —á–∏—Å–µ–ª –∏ –ª—é–±—ã—Ö —è–≤–ª–µ–Ω–∏–π, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏—Ö –≤ –º–∏—Ä–µ. "
        "–°–∞–º—ã–º –≥–ª–∞–≤–Ω—ã–º —á–∏—Å–ª–æ–≤—ã–º –∫–æ–¥–æ–º, –æ–∫–∞–∑—ã–≤–∞—é—â–∏–º –æ–≥—Ä–æ–º–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. "
        "–û–Ω–∞ –Ω–µ—Å—ë—Ç –≤ —Å–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏ –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –µ—ë —Å –ø–æ–º–æ—â—å—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π, —Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ä–∞–∑–Ω—ã–µ "
        "–∞—Å–ø–µ–∫—Ç—ã –∂–∏–∑–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞, –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, —Ç–∞–ª–∞–Ω—Ç—ã, –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, –º–∏—Å—Å–∏—é –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è, –µ–≥–æ –ø—Ä–æ—à–ª–æ–µ –∏ –±—É–¥—É—â–µ–µ.\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
        reply_markup=main_menu
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user = update.message.from_user
    username = f"@{user.username}" if user.username else user.full_name

    try:
        if text == "üî¢ –£–∑–Ω–∞–π –æ —Å–µ–±–µ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–æ—Ç 1 –¥–æ 31):", reply_markup=date_keyboard)
            return ASK_DAY

        elif text == "üóì –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="consult_–û–±—â–∏–π –∑–∞–ø—Ä–æ—Å")]])
            )

        elif text == "üôã‚Äç‚ôÄÔ∏è –û —Å–µ–±–µ":
            await update.message.reply_text("–Ø –ù–∞—Ç–∞–ª—å—è, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ ‚ú®")

        elif text in SECTION_MAP:
            description = SECTION_MAP[text]
            await update.message.reply_text(
                f'–†–∞–∑–¥–µ–ª "{text}". {description}\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"consult_{text}")]])
            )

        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.", reply_markup=main_menu)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    section = query.data.replace("consult_", "")
    user = query.from_user
    username = f"@{user.username}" if user.username else user.full_name
    now = datetime.now().strftime("%Y-%m-%d %H:%M")

    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                f"üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
                f"–†–∞–∑–¥–µ–ª: {section}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user.id})\n"
                f"–í—Ä–µ–º—è: {now}"
            )
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    await query.edit_message_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")

async def process_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit() or not (1 <= int(text) <= 31):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31.", reply_markup=date_keyboard)
        return ASK_DAY

    number = int(text)
    max_iterations = 5
    iterations = 0
    while number > 22 and iterations < max_iterations:
        number = sum(int(d) for d in str(number))
        iterations += 1

    result = descriptions.get(number, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await update.message.reply_text(f"–í–∞—à–µ —á–∏—Å–ª–æ: {number}\n\n{result}", reply_markup=main_menu)
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.environ.get("TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={ASK_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_day)]},
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_callback))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
