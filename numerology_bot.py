import os
import re
import logging
from datetime import datetime
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters,
                          ContextTypes, ConversationHandler, CallbackQueryHandler, Application)
import uvicorn

logging.basicConfig(level=logging.INFO)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
ASK_DAY = range(1)[0]
ADMIN_ID = 5786594975  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
TOKEN = os.environ.get("TOKEN")
WEBHOOK_HOST = os.environ.get("RENDER_EXTERNAL_URL") or "https://numerology-bot.onrender.com"
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã ---
main_menu = ReplyKeyboardMarkup([
    ["üî¢ –£–∑–Ω–∞–π –æ —Å–µ–±–µ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"],
    ["üë∂ –î–µ—Ç—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞"],
    ["‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üßò‚Äç‚ôÄÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ"],
    ["üß† –õ–∏—á–Ω–æ—Å—Ç—å", "üåü –ú–∏—Å—Å–∏—è –¥—É—à–∏"],
    ["üíº –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ–Ω—å–≥–∏", "üå≥ –°–≤—è–∑—å —Å —Ä–æ–¥–æ–º"],
    ["üóì –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"],
    ["üôã‚Äç‚ôÄÔ∏è –û —Å–µ–±–µ"]
], resize_keyboard=True)

date_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton(str(i)) for i in range(j, j + 5) if i <= 31] for j in range(1, 32, 5)],
    resize_keyboard=True
)

SECTION_MAP = {
    "üë∂ –î–µ—Ç—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞": "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —è –ø—Ä–æ–≤–µ–¥—É –æ—Å–æ–±—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –∏ –¥–∞–º —Ç–µ–±–µ –∑–Ω–∞–Ω–∏—è –æ —Ç–≤–æ–µ–º —Ä–µ–±—ë–Ω–∫–µ: —Ç–∞–ª–∞–Ω—Ç—ã, —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–∞–¥–∞—á–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–Ω –ø—Ä–∏—à—ë–ª –≤ —ç—Ç–æ—Ç –º–∏—Ä.",
    "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è": "–£–∑–Ω–∞–π, –∫–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.",
    "üßò‚Äç‚ôÄÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö –∏ –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
    "üß† –õ–∏—á–Ω–æ—Å—Ç—å": "–ö—Ç–æ —Ç—ã, —Ç–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, —Ç–∞–ª–∞–Ω—Ç—ã, —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –æ—à–∏–±–∫–∏.",
    "üåü –ú–∏—Å—Å–∏—è –¥—É—à–∏": "–û –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ –¥—É—à–∏ –≤ —ç—Ç–æ–º –≤–æ–ø–ª–æ—â–µ–Ω–∏–∏.",
    "üíº –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ–Ω—å–≥–∏": "–ß—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ–∫ –∏ –ø–æ—Ç–æ–∫ –∏–∑–æ–±–∏–ª–∏—è.",
    "üå≥ –°–≤—è–∑—å —Å —Ä–æ–¥–æ–º": "–ß—Ç–æ –¥–∞—ë—Ç —Å–≤—è–∑—å —Å —Ä–æ–¥–æ–º, —Ä–æ–¥–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞—á–µ–º –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É."
}

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ ---
def load_descriptions():
    path = os.path.join(os.path.dirname(__file__), "numerology_data.txt")
    descriptions = {}
    try:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        logging.error("–§–∞–π–ª numerology_data.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return descriptions

    current_number = None
    buffer = []
    for line in content.splitlines():
        line = line.strip()
        if re.fullmatch(r"\d{1,2}:", line):
            if current_number and buffer:
                descriptions[current_number] = "\n".join(buffer).strip()
            current_number = int(line[:-1])
            buffer = []
        else:
            buffer.append(line)
    if current_number and buffer:
        descriptions[current_number] = "\n".join(buffer).strip()

    return descriptions

descriptions = load_descriptions()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ –ö–æ–¥ –¥—É—à–∏. –¶–∏—Ñ—Ä–æ–≤–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è.\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:",
        reply_markup=main_menu
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üî¢ –£–∑–Ω–∞–π –æ —Å–µ–±–µ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–æ—Ç 1 –¥–æ 31):", reply_markup=date_keyboard)
        return ASK_DAY
    elif text in SECTION_MAP:
        await update.message.reply_text(
            f'{SECTION_MAP[text]}\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"consult_{text}")]])
        )
    elif text == "üóì –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:", reply_markup=main_menu)
    elif text == "üôã‚Äç‚ôÄÔ∏è –û —Å–µ–±–µ":
        await update.message.reply_text("–Ø –ù–∞—Ç–∞–ª—å—è, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ ‚ú®")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu)

async def process_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:", reply_markup=date_keyboard)
        return ASK_DAY

    day = int(text)
    while day > 22:
        day = sum(map(int, str(day)))

    message = descriptions.get(day, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await update.message.reply_text(f"–í–∞—à–µ —á–∏—Å–ª–æ: {day}\n\n{message}", reply_markup=main_menu)
    return ConversationHandler.END

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    section = query.data.replace("consult_", "")
    user = query.from_user
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n–†–∞–∑–¥–µ–ª: {section}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.full_name}\nID: {user.id}\n–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    )
    await query.edit_message_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")

# --- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI –∏ Webhook ---
app = FastAPI()
application = ApplicationBuilder().token(TOKEN).build()

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    update = Update.de_json(await request.json(), application.bot)
    await application.update_queue.put(update)
    return "ok"

@app.on_event("startup")
async def startup():
    await application.bot.set_webhook(WEBHOOK_URL)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üî¢.*"), handle_message)],
        states={ASK_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_day)]},
        fallbacks=[]
    )
    application.add_handler(conv)
    # üëá –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await application.initialize()
    await application.start()
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Webhook")

@app.on_event("shutdown")
async def shutdown():
    await application.stop()
    await application.shutdown()

# --- –ó–∞–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ) ---
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=1000, reload=True)
